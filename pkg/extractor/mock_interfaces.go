// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package extractor is a generated GoMock package.
package extractor

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTimeExtractor is a mock of TimeExtractor interface.
type MockTimeExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockTimeExtractorMockRecorder
}

// MockTimeExtractorMockRecorder is the mock recorder for MockTimeExtractor.
type MockTimeExtractorMockRecorder struct {
	mock *MockTimeExtractor
}

// NewMockTimeExtractor creates a new mock instance.
func NewMockTimeExtractor(ctrl *gomock.Controller) *MockTimeExtractor {
	mock := &MockTimeExtractor{ctrl: ctrl}
	mock.recorder = &MockTimeExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeExtractor) EXPECT() *MockTimeExtractorMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockTimeExtractor) Extract(input string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", input)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockTimeExtractorMockRecorder) Extract(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockTimeExtractor)(nil).Extract), input)
}
